.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ANNOBIN 1"
.TH ANNOBIN 1 2024-01-02 annobin-1 "RPM Development Tools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
annobin \- Annobin
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Binary Annotation is a method for recording information about an
application inside the application itself.  It is an implementation of
the \f(CW\*(C`Watermark\*(C'\fR specification defined here:
<\fBhttps://fedoraproject.org/wiki/Toolchain/Watermark\fR>
.PP
Although mainly focused on recording security information, the system
can be used to record any kind of data, even data not related to the
application.  One of the main goals of the system however is the
ability to specify the address range over which a given piece of
information is valid.  So for example it is possible to specify that
all of a program was compiled with the \fB\-O2\fR option except for
one special function which was compiled with \fB\-O0\fR instead.
.PP
The range information is useful because it allows third parties to
examine the binary and find out if its construction was consistent.
IE that there are no gaps in the recorded information, and no special
cases where a required feature was not active.
.PP
The system works by adding special sections to the application
containing individual pieces of information along with an address
range for which the information is valid.  (Some effort has gone into
the storing this information in a reasonably compact format).
.PP
The information is generated by a plugin that is attached to the
compiler.  The plugin extracts information from the internals of
compiler and records them in the object file(s) being produced.
.PP
Note \- the plugin method is just one way of generating the
information.  Any interested party can create and add information to
the object file, providing that they follow the Watermark
specification.
.PP
The information can be extracted from files via the use of tools like
\&\f(CW\*(C`readelf\*(C'\fR and \f(CW\*(C`objdump\*(C'\fR.  The \f(CW\*(C`annobin\*(C'\fR package itself
includes a program called \fBannocheck\fR which can can also
examine this information.  Details on this program can be found
elsewhere in this documentation.
.PP
Experience has shown however that storing the range information along
with the data does tend to significantly increase the size of
programs.  So the system also provides an alternative implementation
which uses a more compact format, at the cose of dropping the range
data.
.PP
Normally the option to enable the recording of binary annotation notes
is enabled automatically by the build system, so no user intervention
is required.  On Fedora and RHEL based systems this is handled by the
\&\fBredhat-rpm-config\fR package.
.PP
Currently the binary annotations are generated by a plugin to the
compiler (\f(CW\*(C`GCC\*(C'\fR, \f(CW\*(C`clang\*(C'\fR or \f(CW\*(C`llvm\*(C'\fR).  This does mean
that files that are not compiled by any of these compilers will not
gain any annotations, although there is an optional assembler switch to
add some basic notes if none are present in the input files.
.PP
If the build system being used does not automatically enable the
\&\f(CW\*(C`annobin\*(C'\fR plugin then it can be specifically added to the compiler
command line by adding the \fB\-fplugin=annobin\fR (for gcc) or
\&\fB\-fplugin=annobin\-for\-clang\fR (for clang) or
\&\fB\-fplugin=annobin\-for\-llvm\fR (for LLVM) option.  It may
also be necessary to tell the compiler where to find the plugin by
adding the \fB\-iplugindir=\fR option, although this should only be
necessary if the plugin is installed in an unusual place.
.PP
If it is desired to disable the recording of binary annotations then
the \fB\-fplugin\-arg\-annobin\-disable\fR (for \f(CW\*(C`gcc\*(C'\fR) or
\&\fB\-Xclang \-plugin\-arg\-annobin\-disable\fR (for \f(CW\*(C`clang\*(C'\fR or
\&\f(CW\*(C`llvm\*(C'\fR) can be used.  Note \- these options must be placed
\&\fIafter\fR the \fB\-fplugin=annobin\fR option.
.PP
On Fedora and RHEL systems the plugin can be disabled entirely for all
compilations in a package by adding
\&\fR\f(CB%undefine\fR\fB _annotated_build\fR to the spec file.
.PP
The information is stored in a binary in either the ELF Note format
inside a special section called \f(CW\*(C`.gnu.build.attributes\*(C'\fR, or else
as ordinary strings inside a section called \f(CW\*(C`.annobin.notes\*(C'\fR.
.PP
The \f(CW\*(C`readelf\*(C'\fR program from the \f(CW\*(C`binutils\*(C'\fR package can
extract and display these notes.  (Adding the \fB\-\-wide\fR
option is also helpful).
.PP
If the information is held in the ELF note format then readelf's
\&\fB\-\-notes\fR option will display them.  Here is an example of the
output:
.PP
.Vb 7
\&        Displaying notes found in: .gnu.build.attributes
\&          Owner                        Data size        Description
\&          GA$<version>3p3              0x00000010       OPEN        Applies to region from 0x8a0 to 0x8c6 (hello.c)
\&          GA$<tool>gcc 7.2.1 20170915  0x00000000       OPEN        Applies to region from 0x8a0 to 0x8c6
\&          GA*GOW:0x452b                0x00000000       OPEN        Applies to region from 0x8a0 to 0x8c6
\&          GA*<stack prot>strong        0x00000000       OPEN        Applies to region from 0x8a0 to 0x8c6
\&          GA*GOW:0x412b                0x00000010       func        Applies to region from 0x8c0 to 0x8c6 (baz)
.Ve
.PP
This shows various different pieces of information, including the fact
that the notes were produced using version 3 of the specification, and
version 3 of the plugin.  The binary was built by gcc version 7.2.1
and the \-fstack\-protector\-strong option was enabled on the command
line.  The program was compiled with \-O2 enabled except the \fBbaz()\fR
function which was compiled with \-O0 instead.
.PP
The most complicated part of the notes is the owner field.  This is
used to encode the type of note as well as its value and possibly
extra data as well.  The format of the field is explained in detail in
the Watermark specification, but it basically consists of the letters
\&\fBG\fR and \fBA\fR followed by an encoding character (one of
\&\fB*$!+\fR) and then a type character and finally the value.
.PP
The notes are always four byte aligned, even on 64\-bit systems.  This
does mean that consumers of the notes may have to read 8\-byte wide
values from 4\-byte aligned addresses, and that producers of the
notes may have to generate unaligned relocs when creating them.
.PP
If the information is held as strings then readelf's
\&\fB\-p.annobin.notes\fR option will display them.  Here is an
example of the output:
.PP
.Vb 7
\&        String dump of section \*(Aq.annobin.notes\*(Aq:
\&          [     0]  AV:4.p.1200
\&          [     c]  RV:running gcc 12.2.1 20221121
\&          [    2b]  BV:annobin gcc 12.2.1 20221121
\&          [    4a]  PN:annobin
\&          [    55]  GW:0x290540
\&          [    61]  SP:3
.Ve
.SH OPTIONS
.IX Header "OPTIONS"
The plugin accepts a small selection of command line arguments,
all accessed by passing
\&\fB\-fplugin\-arg\-annobin\-<option>\fR (for \f(CW\*(C`gcc\*(C'\fR) or
\&\fB\-Xclang \-plugin\-arg\-annobin\-<option>\fR (for \f(CW\*(C`clang\*(C'\fR or
\&\f(CW\*(C`llvm\*(C'\fR) on the command line.  These options must be placed on
the command line after the plugin itself is mentioned.  Note \- not all
versions of the plugin accept all of these options.
.PP
In addition it is possible to pass options via the \f(CW\*(C`ANNOBIN\*(C'\fR
environment variable.  Multiple arguments must be separated by commas,
and arguments that need a value must use an equals sign rather than a
space or colon.
.PP
The supported options are:
.ie n .IP """disable""" 4
.el .IP \f(CWdisable\fR 4
.IX Item "disable"
.PD 0
.ie n .IP """enable""" 4
.el .IP \f(CWenable\fR 4
.IX Item "enable"
.PD
Either disable or enable the plugin.  The default is for the plugin to
be enabled.
.ie n .IP """help""" 4
.el .IP \f(CWhelp\fR 4
.IX Item "help"
Display a list of supported options on the standard output.  This is
in addition to whatever else the plugin has been instructed to do.
.ie n .IP """version""" 4
.el .IP \f(CWversion\fR 4
.IX Item "version"
Display the version of the plugin on the standard output.  This is
in addition to whatever else the plugin has been instructed to do.
.ie n .IP """verbose""" 4
.el .IP \f(CWverbose\fR 4
.IX Item "verbose"
Report the actions that the plugin is taking.  If invoked for a second
time on the command line the plugin will be very verbose.
.ie n .IP """function\-verbose""" 4
.el .IP \f(CWfunction\-verbose\fR 4
.IX Item "function-verbose"
Report the generation of function specific notes.  This indicates that
the named function was compiled with different options from those that
were globally enabled.
.ie n .IP """stack\-size\-notes""" 4
.el .IP \f(CWstack\-size\-notes\fR 4
.IX Item "stack-size-notes"
.PD 0
.ie n .IP """no\-stack\-size\-notes""" 4
.el .IP \f(CWno\-stack\-size\-notes\fR 4
.IX Item "no-stack-size-notes"
.PD
Do, or do not, record information about the stack requirements of
functions in the executable.  This feature is disabled by default as
these notes can take up a lot of extra room if the executable contains
a lot of functions.
.ie n .IP """stack\-threshold=\fIN\fR""" 4
.el .IP \f(CWstack\-threshold=\fR\f(CIN\fR\f(CW\fR 4
.IX Item "stack-threshold=N"
If stack size requirements are being recorded then this option sets
the minimum value to record.  Functions which require less than
\&\f(CW\*(C`N\*(C'\fR bytes of static stack space will not have their requirements
recorded.  If not set, then \f(CW\*(C`N\*(C'\fR defaults to 1024.
.ie n .IP """global\-file\-syms""" 4
.el .IP \f(CWglobal\-file\-syms\fR 4
.IX Item "global-file-syms"
.PD 0
.ie n .IP """no\-global\-file\-syms""" 4
.el .IP \f(CWno\-global\-file\-syms\fR 4
.IX Item "no-global-file-syms"
.PD
If enabled the \fBglobal-file-syms\fR option will create globally
visible, unique symbols to mark the start and end of the compiled
code.  This can be desirable if a program consists of multiple source
files with the same name, or if it links to a library that was built
with source files of the same name as the program itself.  The
disadvantage of this feature however is that the unique names are
based upon the time of the build, so repeated builds of the same
source will have different symbol names inside it.  This breaks the
functionality of the build-id system which is meant to identify
similar builds created at different times.  This feature is disabled
by default, and if enabled can be disabled again via the
\&\fBno-global-file-syms\fR option.
.ie n .IP """attach""" 4
.el .IP \f(CWattach\fR 4
.IX Item "attach"
.PD 0
.ie n .IP """no\-attach""" 4
.el .IP \f(CWno\-attach\fR 4
.IX Item "no-attach"
.PD
When gcc compiles code with the \fB\-ffunction\-sections\fR option
active it will place each function into its own section.  When the
\&\f(CW\*(C`annobin\*(C'\fR \fBattach\fR option is active the plugin will attempt to
attach the function section to a group containing the notes and
relocations for the function.  In that way, if the linker decides to
discard the function, it will also know that it should discard the
notes and relocations as well.
.Sp
The default is \fBattach\fR, but this can be disabled via the
\&\fBno-attach\fR option.  Note however that if both \fBattach\fR
and \fBlink-order\fR are disabled then note generation for function
sections will not work properly.
.ie n .IP """link\-order""" 4
.el .IP \f(CWlink\-order\fR 4
.IX Item "link-order"
.PD 0
.ie n .IP """no\-link\-order""" 4
.el .IP \f(CWno\-link\-order\fR 4
.IX Item "no-link-order"
.PD
As an alternative to using section groups and a special assembler
directive the plugin can use a feature of the ELF
\&\f(CW\*(C`SHF_LINK_ORDER\*(C'\fR flag which tells the linker that it should
discard a section if the section it is linked to is also being
discarded.  This behaviour is enabled by the \fBlink-order\fR
option.
.ie n .IP """rename""" 4
.el .IP \f(CWrename\fR 4
.IX Item "rename"
Adds an extra prefix to the symbol names generated by the
\&\f(CW\*(C`annobin\*(C'\fR plugin.  This allows the plugin to be run twice on the
same executable, which can be useful for debugging and build testing.
.ie n .IP """active\-checks""" 4
.el .IP \f(CWactive\-checks\fR 4
.IX Item "active-checks"
.PD 0
.ie n .IP """no\-active\-checks""" 4
.el .IP \f(CWno\-active\-checks\fR 4
.IX Item "no-active-checks"
.PD
The \f(CW\*(C`annobin\*(C'\fR plugin will normally generate warning messages if it
detects that certain preprocessor command line options are missing or
misspelt.  The \fBactive-checks\fR option changes the warnings into
errors, just as if \fB\-Werror\fR had been specified.  The
\&\fBno-active-checks\fR option disables the messages entirely.
.Sp
Currently the plugin checks for these issues:
.RS 4
.ie n .IP """Missing FORTIFY_SOURCE""" 4
.el .IP "\f(CWMissing FORTIFY_SOURCE\fR" 4
.IX Item "Missing FORTIFY_SOURCE"
This warning is generated when neither \fB\-D_FORTIFY_SOURCE=2\fR
nor \fB\-D_FORTIFY_SOURCE=3\fR have been provided on the command
line and the \fB\-flto\fR option has been enabled.
.Sp
Nomrally this problem would be detected by the \fBannocheck\fR
tool, but LTO compilation hides preprocessor options, so information
about them cannot be passed on by the plugin.  This is why the plugin
will generate a warning message when the \f(CW\*(C`_FORTIFY_SOURCE\*(C'\fR option
is missing and LTO is enabled.
.ie n .IP """\-D_FORTIFY_SOURCE typo""" 4
.el .IP "\f(CW\-D_FORTIFY_SOURCE typo\fR" 4
.IX Item "-D_FORTIFY_SOURCE typo"
The plugin will warn if the \f(CW\*(C`\-D_FORTIFY_SOURCE\*(C'\fR option is spelt
as either \f(CW\*(C`\-DFORTIFY_SOURCE\*(C'\fR or \f(CW\*(C`\-D_\|_FORTIFY_SOURCE\*(C'\fR.
.ie n .IP """\-D_GLIBCXX_ASSERTIONS typo""" 4
.el .IP "\f(CW\-D_GLIBCXX_ASSERTIONS typo\fR" 4
.IX Item "-D_GLIBCXX_ASSERTIONS typo"
The plugin will warn if the \f(CW\*(C`\-D_GLIBCXX_ASSERTIONS\*(C'\fR option is
spelt as either \f(CW\*(C`\-DGLIBCXX_ASSERTIONS\*(C'\fR or
\&\f(CW\*(C`\-D_\|_GLIBCXX_ASSERTIONS\*(C'\fR.
.RE
.RS 4
.Sp
Note \- in the future the \f(CW\*(C`annobin\*(C'\fR plugin might be extended to
produce warning messages for other missing command line options.
.Sp
Note \- as a workaround for certain tests generated by the
\&\fBautoconf\fR tool the warning message will not be produced if
the input source filename starts with \fIconftest.\fR.  In these
cases autoconf is usually checking to see if a warning will be
produced for some other reason, and so the \f(CW\*(C`annobin\*(C'\fR warning
would get in the way.  If the \fBactive-checks\fR option has been
enabled however, an error message will still be generated.
.RE
.ie n .IP """dynamic\-notes""" 4
.el .IP \f(CWdynamic\-notes\fR 4
.IX Item "dynamic-notes"
.PD 0
.ie n .IP """no\-dynamic\-notes""" 4
.el .IP \f(CWno\-dynamic\-notes\fR 4
.IX Item "no-dynamic-notes"
.ie n .IP """static\-notes""" 4
.el .IP \f(CWstatic\-notes\fR 4
.IX Item "static-notes"
.ie n .IP """no\-static\-notes""" 4
.el .IP \f(CWno\-static\-notes\fR 4
.IX Item "no-static-notes"
.PD
These options are deprecated.
.ie n .IP """ppc64\-nops""" 4
.el .IP \f(CWppc64\-nops\fR 4
.IX Item "ppc64-nops"
.PD 0
.ie n .IP """no\-ppc64\-nops""" 4
.el .IP \f(CWno\-ppc64\-nops\fR 4
.IX Item "no-ppc64-nops"
.PD
This option either enables or disables the insertion of NOP
instructions in the some of the code sections of PowerPC64 binaries.
This is necessary to avoid problems with the \f(CW\*(C`elflint\*(C'\fR program
which will complain about binaries built without this option enabled.
The option is enabled by default, but since it does increase the size
of compiled programs by a small amount, the \fBno\-ppc64\-nops\fR is
provided in order to turn it off.
.ie n .IP """note\-format=""note""|""string""""" 4
.el .IP \f(CWnote\-format=note|string\fR 4
.IX Item "note-format=note|string"
This option chooses the format used to store the information generated
by the plugin.  The possibilities are:
.RS 4
.ie n .IP """note""" 4
.el .IP \f(CWnote\fR 4
.IX Item "note"
Store the information as ELF format notes in the
\&\f(CW\*(C`.gnu.build.attributes\*(C'\fR section.
.ie n .IP """string""" 4
.el .IP \f(CWstring\fR 4
.IX Item "string"
Store the information as mergeable strings in the
\&\f(CW\*(C`.annobin.notes\*(C'\fR section.
.RE
.RS 4
.Sp
The default is \f(CW\*(C`note\*(C'\fR.
.RE
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (c) 2018 \- 2024 Red Hat.
.PP
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled "GNU Free Documentation License".
